#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== D√âBOGAGE AUTOMATIQUE MINISHELL ===${NC}"

# 1. Compilation avec d√©bogage
echo -e "${YELLOW}=== Compilation avec d√©bogage ===${NC}"
make re

if [ $? -ne 0 ]; then
    echo -e "${RED}Erreur de compilation !${NC}"
    exit 1
fi

echo -e "${GREEN}Compilation r√©ussie !${NC}"

# 2. Test simple automatique
echo -e "\n${YELLOW}=== Test simple automatique ===${NC}"
echo "Test de commandes de base..."

# Cr√©er un fichier de test temporaire
cat > test_commands.txt << 'EOF'
pwd
ls
echo "Hello World"
exit
EOF

echo -e "${BLUE}Ex√©cution des commandes de test...${NC}"
timeout 10s ./minishell < test_commands.txt 2>&1 | tee test_output.log

if [ $? -eq 124 ]; then
    echo -e "${RED}TIMEOUT: Le programme a pris trop de temps${NC}"
elif [ $? -eq 139 ]; then
    echo -e "${RED}SEGFAULT D√âTECT√â dans le test simple !${NC}"
else
    echo -e "${GREEN}Test simple termin√©${NC}"
fi

# 3. Test avec Valgrind automatique
echo -e "\n${YELLOW}=== Test Valgrind automatique ===${NC}"
echo "Recherche de fuites m√©moire et erreurs..."

valgrind --tool=memcheck \
         --leak-check=full \
         --show-leak-kinds=all \
         --track-origins=yes \
         --verbose \
         --log-file=valgrind_output.log \
         timeout 10s ./minishell < test_commands.txt 2>&1

# Analyser le rapport Valgrind
if [ -f valgrind_output.log ]; then
    echo -e "${BLUE}Analyse du rapport Valgrind :${NC}"
    
    # Chercher les erreurs critiques
    if grep -q "Invalid read\|Invalid write\|Conditional jump" valgrind_output.log; then
        echo -e "${RED}‚ö†Ô∏è  ERREURS M√âMOIRE D√âTECT√âES !${NC}"
        echo "Erreurs trouv√©es :"
        grep -A2 -B2 "Invalid read\|Invalid write\|Conditional jump" valgrind_output.log
    fi
    
    # Chercher les fuites
    if grep -q "definitely lost\|possibly lost" valgrind_output.log; then
        echo -e "${RED}‚ö†Ô∏è  FUITES M√âMOIRE D√âTECT√âES !${NC}"
        grep -A5 "HEAP SUMMARY\|LEAK SUMMARY" valgrind_output.log
    else
        echo -e "${GREEN}‚úÖ Aucune fuite m√©moire majeure d√©tect√©e${NC}"
    fi
    
    # Afficher le r√©sum√©
    echo -e "\n${BLUE}R√©sum√© Valgrind :${NC}"
    grep -A10 "ERROR SUMMARY" valgrind_output.log | tail -10
else
    echo -e "${RED}Impossible de g√©n√©rer le rapport Valgrind${NC}"
fi

# 4. Test GDB automatique (pour les segfaults)
echo -e "\n${YELLOW}=== Test GDB automatique ===${NC}"

# Cr√©er un script GDB
cat > gdb_commands.txt << 'EOF'
set pagination off
set logging file gdb_output.log
set logging on
run < test_commands.txt
bt
info registers
quit
y
EOF

echo "Lancement de GDB pour capturer les segfaults..."
timeout 15s gdb -batch -x gdb_commands.txt ./minishell 2>&1

# Analyser la sortie GDB
if [ -f gdb_output.log ]; then
    echo -e "${BLUE}Analyse GDB :${NC}"
    
    if grep -q "Program received signal SIGSEGV\|Segmentation fault" gdb_output.log; then
        echo -e "${RED}üö® SEGFAULT D√âTECT√â !${NC}"
        echo "Stack trace :"
        grep -A20 "Program received signal\|#0\|#1\|#2\|#3\|#4" gdb_output.log
        
        # Essayer d'identifier la fonction probl√©matique
        echo -e "\n${YELLOW}Fonction probl√©matique probable :${NC}"
        grep -o "in [a-zA-Z_][a-zA-Z0-9_]* (" gdb_output.log | head -3
    else
        echo -e "${GREEN}‚úÖ Aucun segfault d√©tect√© par GDB${NC}"
    fi
else
    echo -e "${YELLOW}GDB n'a pas g√©n√©r√© de log (programme peut-√™tre normal)${NC}"
fi

# 5. R√©sum√© automatique
echo -e "\n${BLUE}=== R√âSUM√â AUTOMATIQUE ===${NC}"

echo -e "${YELLOW}üìä R√©sultats du d√©bogage :${NC}"

# V√©rifier chaque type d'erreur
segfault_detected=false
memory_errors=false
memory_leaks=false

if grep -q "Segmentation fault\|Program received signal SIGSEGV" test_output.log gdb_output.log 2>/dev/null; then
    segfault_detected=true
fi

if [ -f valgrind_output.log ] && grep -q "Invalid read\|Invalid write" valgrind_output.log; then
    memory_errors=true
fi

if [ -f valgrind_output.log ] && grep -q "definitely lost.*[1-9]" valgrind_output.log; then
    memory_leaks=true
fi

# Affichage du r√©sum√©
if [ "$segfault_detected" = true ]; then
    echo -e "${RED}‚ùå Segfaults d√©tect√©s${NC}"
    echo "  ‚Üí V√©rifiez gdb_output.log pour la stack trace"
else
    echo -e "${GREEN}‚úÖ Aucun segfault${NC}"
fi

if [ "$memory_errors" = true ]; then
    echo -e "${RED}‚ùå Erreurs d'acc√®s m√©moire${NC}"
    echo "  ‚Üí V√©rifiez valgrind_output.log"
else
    echo -e "${GREEN}‚úÖ Acc√®s m√©moire OK${NC}"
fi

if [ "$memory_leaks" = true ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fuites m√©moire d√©tect√©es${NC}"
    echo "  ‚Üí V√©rifiez valgrind_output.log"
else
    echo -e "${GREEN}‚úÖ Pas de fuites majeures${NC}"
fi

# 6. Suggestions automatiques
echo -e "\n${YELLOW}üí° Suggestions automatiques :${NC}"

if [ "$segfault_detected" = true ]; then
    echo "‚Ä¢ Ajoutez des v√©rifications NULL dans vos fonctions"
    echo "‚Ä¢ V√©rifiez les allocations malloc/calloc"
    echo "‚Ä¢ Contr√¥lez les acc√®s aux tableaux (bounds checking)"
fi

if [ "$memory_errors" = true ]; then
    echo "‚Ä¢ Initialisez toutes vos variables"
    echo "‚Ä¢ V√©rifiez la taille des allocations"
    echo "‚Ä¢ √âvitez les acc√®s apr√®s free()"
fi

if [ "$memory_leaks" = true ]; then
    echo "‚Ä¢ Ajoutez des free() correspondants aux malloc()"
    echo "‚Ä¢ V√©rifiez votre fonction de nettoyage"
fi

# 7. Tests avec minishell_tester
# Cette section ex√©cute automatiquement le testeur (minishell_tester) s'il est
# pr√©sent ou peut √™tre clon√© depuis GitHub. Un r√©sum√© du nombre de tests
# r√©ussis sera affich√©. Si certains tests √©chouent, un avertissement est
# pr√©sent√©.
echo -e "\n${YELLOW}=== Tests avec minishell_tester ===${NC}"

# √âtat initial
tester_status="not_run"

# V√©rifier la pr√©sence du dossier de test et le cloner si n√©cessaire
if [ ! -d "minishell_tester" ]; then
    echo -e "${BLUE}Clonage du d√©p√¥t minishell_tester...${NC}"
    if git clone --depth 1 https://github.com/LucasKuhn/minishell_tester.git >/dev/null 2>&1; then
        echo -e "${GREEN}Testeur clon√© avec succ√®s${NC}"
    else
        echo -e "${RED}√âchec du clonage du testeur, cette √©tape est ignor√©e${NC}"
        tester_status="unavailable"
    fi
fi

# Ex√©cuter le testeur si disponible
if [ -d "minishell_tester" ]; then
    echo -e "${BLUE}Lancement des tests du testeur (cela peut prendre un moment)...${NC}"
    pushd minishell_tester >/dev/null || true
    ./tester 2>&1 | tee tester_output.log
    tester_exit=${PIPESTATUS[0]}
    popd >/dev/null || true
    # Extraire la derni√®re ligne contenant le ratio pass√©/total
    summary_line=$(grep -E '[0-9]+/[0-9]+' minishell_tester/tester_output.log | tail -n 1 | tr -d '\r')
    if [ -n "$summary_line" ]; then
        echo -e "${BLUE}R√©sum√© du testeur :${NC} $summary_line"
        passed=$(echo $summary_line | awk -F '/' '{print $1}')
        total=$(echo $summary_line | awk -F '/' '{print $2}')
        if [ "$passed" != "$total" ]; then
            tester_status="fail"
        else
            tester_status="success"
        fi
    else
        echo -e "${YELLOW}Impossible d'extraire le r√©sum√© des tests du fichier de sortie${NC}"
        tester_status="error"
    fi
fi

# Avertissement selon le statut final
if [ "$tester_status" = "fail" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Certains tests du testeur ont √©chou√©. Consultez minishell_tester/tester_output.log pour plus de d√©tails.${NC}"
elif [ "$tester_status" = "unavailable" ]; then
    echo -e "${YELLOW}Le testeur n'est pas disponible, aucune ex√©cution effectu√©e.${NC}"
elif [ "$tester_status" = "error" ]; then
    echo -e "${YELLOW}Une erreur est survenue lors de l'ex√©cution du testeur. Consultez minishell_tester/tester_output.log pour plus d'informations.${NC}"
fi

# Nettoyage
echo -e "\n${BLUE}üìÅ Fichiers de d√©bogage g√©n√©r√©s :${NC}"
echo "‚Ä¢ test_output.log - Sortie du test simple"
echo "‚Ä¢ valgrind_output.log - Rapport Valgrind"
echo "‚Ä¢ gdb_output.log - Sortie GDB"
echo "‚Ä¢ test_commands.txt - Commandes de test"
echo "‚Ä¢ minishell_tester/tester_output.log - Sortie du testeur (si ex√©cut√©)"

# Demander si on veut garder les fichiers
echo -e "\n${YELLOW}Voulez-vous supprimer les fichiers temporaires ? (y/N)${NC}"
read -t 5 -n 1 response
if [[ $response =~ ^[Yy]$ ]]; then
    rm -f test_commands.txt gdb_commands.txt
    echo -e "${GREEN}Fichiers temporaires supprim√©s${NC}"
else
    echo -e "${BLUE}Fichiers conserv√©s pour analyse manuelle${NC}"
fi

echo -e "\n${GREEN}=== D√âBOGAGE AUTOMATIQUE TERMIN√â ===${NC}"