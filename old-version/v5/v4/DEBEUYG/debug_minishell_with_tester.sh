#!/bin/bash
set -euo pipefail

# Vérifie dépendances
for cmd in valgrind gdb readelf; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "Erreur : '$cmd' n'est pas installé. Installe-le pour continuer."
        exit 1
    fi
done

if [ $# -lt 2 ]; then
    echo "Usage: $0 <exécutable> <fichier_d'entrée> [--] [args...]"
    echo "Exemple: $0 ./minishell input.txt"
    exit 1
fi

EXE="$1"
INPUT="$2"
shift 2
EXTRA_ARGS=("$@")

if [ ! -x "$EXE" ]; then
    echo "Erreur : '$EXE' n'est pas exécutable ou n'existe pas."
    exit 1
fi

if [ ! -f "$INPUT" ]; then
    echo "⚠️  Fichier d'entrée '$INPUT' introuvable."
    read -p "Voulez-vous créer un fichier d'entrée de test minimal ? [Y/n] " resp
    resp=${resp:-Y}
    if [[ "$resp" =~ ^[Yy]$ ]]; then
        cat > "$INPUT" <<EOF
pwd
echo autogenerated test
exit
EOF
        echo "Fichier '$INPUT' créé."
    else
        echo "Abandon."
        exit 1
    fi
fi

# Vérifier la présence des symboles de debug
if ! readelf --sections "$EXE" | grep -q "\.debug_info"; then
    echo "⚠️  Attention : l'exécutable ne semble pas contenir d'informations de debug. Recompile avec '-g -O0'."
else
    echo "✅ Debug symbols détectés."
fi

mkdir -p .debug_combined
VG_LOG=".debug_combined/valgrind.log"
GDB_LOG=".debug_combined/gdb_combined.log"

echo -e "\n=== 1. Lancement de Valgrind pour détecter l'erreur mémoire initiale ==="
valgrind --tool=memcheck \
         --leak-check=full \
         --show-leak-kinds=all \
         --track-origins=yes \
         --verbose \
         --log-file="$VG_LOG" \
         timeout 15s "$EXE" < "$INPUT" "${EXTRA_ARGS[@]}" >/dev/null 2>&1 || true
# Génération du script GDB avec injection explicite de la variable INPUT
GDB_SCRIPT=".debug_combined/gdb_script.gdb"
cat > "$GDB_SCRIPT" <<EOF
set pagination off
set logging file $GDB_LOG
set logging on
record
EOF

# Si on a une location suspecte, on ajoutera le breakpoint plus loin
# (la logique d'extraction reste identique à ce que tu avais)

# Exemple d'ajout de breakpoint manuel : ici on le met sur main par défaut
echo "break main" >> "$GDB_SCRIPT"

cat >> "$GDB_SCRIPT" <<EOF
run < $INPUT
echo "\n=== Backtrace complète ===\n"
backtrace full
echo "\n=== Variables locales ===\n"
info locals
echo "\n=== Registres ===\n"
info registers
echo "\n=== Disassembly autour du PC ===\n"
x/20i \$pc

echo "\n=== Stepi: progression de 5 instructions ===\n"
set \$__steps = 5
while \$__steps > 0
  stepi
  info registers
  set \$__steps = \$__steps - 1
end

echo "\n=== Tentative reverse-step (si supporté) ===\n"
reverse-step
backtrace full

quit
EOF
